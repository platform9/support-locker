---
- name: resmgr_get_hosts
  uri:
    url: "https://{{ resmgr_pf9_du | regex_replace('^htt.*://') }}/resmgr/v1/hosts/"
    method: GET
    headers:
      X-Auth-Token: "{{ resmgr_token }}"
    return_content: yes
  register: resmgr_all_hosts

- name: Resmgr filter_roles=ALL and reachable
  set_fact:
    resmgr_hosts_filtered: "{{ item }}"
  when: (item.info.responding is defined) and (item.info.responding and resmgr_filter_logic == 'all' and resmgr_filter_roles is subset(item.roles))
  with_items: "{{ resmgr_all_hosts.json }}"
  loop_control:
    label: "{{ item.info.hostname }}"

- name: Resmgr filter_roles=ANY and reachable
  set_fact:
    resmgr_hosts_filtered: "{{ (resmgr_hosts_filtered | default([])) + [item] }}"
  when: (item.info.responding is defined) and (item.info.responding and resmgr_filter_logic == 'any' and ( item.roles | default('')) | intersect(resmgr_filter_roles) | length > 0)
  with_items: "{{ resmgr_all_hosts.json }}"
  loop_control:
    label: "{{ item.info.hostname }}"

- name: Check Output of Resmgr filter_roles 
  fail:
    msg: 
      - "FAILURE: No Host Matched the Filter:
         Logic: {{ resmgr_filter_logic }}
         Roles: {{ resmgr_filter_roles }}"
  when: resmgr_hosts_filtered is not defined

- name: Test all IPs from resmgr_hosts ipaddress
  command: ping -c1 "{{ item.1 }}"
  delegate_to: localhost
  register: ping_result
  with_subelements:
    - "{{ resmgr_hosts_filtered }}"
    - extensions.ip_address.data
  changed_when: "ping_result.rc == 0"
  ignore_errors: yes
  loop_control:
    label: "{{ item.0.info.hostname }}-{{ item.1 }}"

- name: Compile clean resmgr_hosts dict
  set_fact:
    resmgr_hosts: "{{ (resmgr_hosts | default([])) + [item.item.0 | combine({'extensions':{'ip_address':{'data': item.item.1 }}}, recursive=True)] }}"
  with_items: "{{ ping_result.results }}"
  when: item.rc == 0
  loop_control:
    label: "{{ item.item.0.info.hostname }}-{{ item.item.1 }}"
