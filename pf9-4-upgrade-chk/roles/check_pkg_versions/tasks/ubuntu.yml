---
# /usr/bin/qemu-system-x86_64
# /usr/sbin/libvirtd

- set_fact:
    version_regex: sed -rn 's/^.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/p' 
    
- name: Get lib-virt Version
  block:
    - shell: "libvirtd --version | {{ version_regex }}"
      register: libvirt_output
      failed_when: libvirt_output.stderr is search("command not found") or libvirt_output.rc != 0
  rescue:
    - set_fact:
        libvirt_output:
          stdout: "not installed"

- name: Get ovs Version
  block:
    - shell: "ovs-vswitchd --version | {{ version_regex }}" 
      register: ovs_output
      failed_when: ovs_output.stderr is search("command not found") or ovs_output.rc != 0
  rescue:
    - set_fact:
        ovs_output:
          stdout: "not installed"

- name: Get qemu Version
  block:
    - shell: "qemu-system-x86_64 --version | {{ version_regex }}" 
      register: qemu_output
      failed_when: qemu_output.stderr is search("command not found") or qemu_output.rc != 0
  rescue:
    - set_fact:
        qemu_output:
          stdout: "not installed"

- name: Validate Libvirt
  set_fact:
    libvirt:
      - libvirt:
          result: "{%
                     if 
                       libvirt_output.stdout != 'not installed' and
                       libvirt_output.stdout is version(min_app_versions.libvirt.Ubuntu.version, '>=')
                       %}PASS{%
                     else
                       %}FAIL{%
                     endif
                   %}"
          installed: "{{ libvirt_output.stdout }}"
          required: "{{ min_app_versions.libvirt.Ubuntu.version }}"

- name: Validate QEMU
  set_fact:
    qemu:
      - qemu:
          result: "{%
                     if
                       qemu_output.stdout != 'not installed' and
                       qemu_output.stdout is version(min_app_versions.qemu.Ubuntu.version, '>=')
                       %}PASS{%
                     else
                       %}FAIL{%
                     endif
                   %}"
          installed: "{{ qemu_output.stdout }}"
          required: "{{ min_app_versions.qemu.Ubuntu.version }}"

- name: Validate OVS
  set_fact:
    ovs:
      - ovs:
          result: "{%
                     if
                       ovs_output.stdout != 'not installed' and
                       ovs_output.stdout is version(min_app_versions.ovs.Ubuntu.version, '>=' )
                       %}PASS{%
                     else
                       %}FAIL{%
                     endif
                   %}"
          installed: "{{ ovs_output.stdout }}"
          required: "{{ min_app_versions.ovs.Ubuntu.version }}"

- name: Create Results Variable
  set_fact:
    results:
      - "host: {{ inventory_hostname }}"
      - "id: {{ hostvars[inventory_hostname].pf9_id }}"
      - "IP: {{ ansible_host }}"

- name: Compile Results
  set_fact:
    results: "{{ (results + [item]) }}"
  with_items:
    - "{{ libvirt }}"
    - "{{ qemu }}"
    - "{{ ovs }}"

